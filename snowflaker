#!/usr/bin/env python

import sys
import os
import csv
import re

def die(msg):
    sys.exit('\33[1;31m%s\033[1;0m' % msg)

def get_input(msg):
    return raw_input('\033[1;32m%s\033[1;0m' % msg).strip()

def print_color(msg):
    print('\033[1;32m%s\033[1;0m' %msg)

def get_cmd():
    print_color(
        'What would you like to do?'
        ' Your options are \"snowflakerize\", \"undo\", or \"reverse-qa\"')
    return get_input('Type \"s\" for snowflakerize, \"u\" for undo, or '
        '\"r\" for reverse-qa: ')

def get_target_directory():
    print "\n"
    dir_name = get_input(
        'Drag and drop target directory to terminal and press enter: ')
    if (not os.path.isdir(dir_name)):
        die('Target must be a directory')
    return dir_name

def get_csv_path():
    print "\n"
    csv_path = get_input('Drag and drop snowflake csv to terminal '
        'and press enter: ')
    if (not os.path.isfile(csv_path)):
        die('Snowflake map must be csv file')

    if (not csv_path.endswith('.csv')):
        die('Snowflake map must be csv file')

    return csv_path

def get_qa_csv():
    print "\n"
    csv_path = get_input('Drag and drop QA csv file to terminal and '
        'press enter: ')
    if (not os.path.isfile(csv_path)):
        die('QA file must be csv file')

    if (not csv_path.endswith('.csv')):
        die('QA file must be csv file')

    return csv_path

def create_snowflake_map(path):
    with open(path, mode='r') as infile:
        reader = csv.reader(infile)
        snowflake_map = dict((rows[0],rows[1]) for rows in reader)
        return snowflake_map

def convert(target_dir, snowflake_map):
    for file in os.listdir(target_dir):
        file_parts = file.split('.')
        filename = file_parts[0]
        ext = file_parts[1]
        if filename in snowflake_map:
            new_name = snowflake_map[filename] + '.' + ext
            print('\033[1;32mSnowflakerizing!\033[1;0m'
                ' %s -----> %s' %(file, new_name))
            os.rename(file, new_name)
        else:
            print('Skipping %s: Not in list of acceptable snowflakes'
                ' or already snowflakerized' % file)

def undo(target_dir, snowflake_map):
    for file in os.listdir(target_dir):
        file_parts = file.split('.')
        filename = file_parts[0]
        ext = file_parts[1]
        if filename in snowflake_map.values():
            for origin in snowflake_map:
                if snowflake_map[origin] == filename:
                    new_name = origin + '.' + ext
                    print('\033[1;32mResetting\033[1;0m'
                    ' %s -----> %s' %(file, new_name))
                    os.rename(file, new_name)
        else:
            print 'Skipping %s: Not a snowflake' % file

def reverse(qa_file, snowflake_map):
    new_file = [];
    dirname = os.path.dirname(qa_file)
    outname = 'qa_mapping.csv'
    out_path = dirname + '/' + outname
    infile = open(qa_file)
    reader = csv.reader(infile)
    for row in reader:
        filename = row[0]
        if not filename:
            continue
        if not re.search(r'RAW_', filename):
            new_file.append(row)
            continue
        p_name = re.search(r'[Pp]\d{4}', filename)
        ext = filename.split('.')[1]
        file_id = filename.split('_')[6]
        candidate = p_name.group(0) + '_' + file_id
        print 'Candidate: %s' % candidate
        if (candidate in snowflake_map.values()):
            for origin in snowflake_map:
                if snowflake_map[origin] == candidate:
                    new_name = origin + '.' + ext
                    row.append(new_name)
                    new_file.append(row)
                    print("\033[1;32mMapping "
                        "%s ---> %s\033[1;0m\n" %(filename, new_name))
                    break
        else:
            new_file.append(row)
    with open(out_path, mode='w') as outfile:
        writer = csv.writer(outfile, lineterminator='\n')
        writer.writerows(new_file)
        print "\n"
        print '========================='
        print "\033[1;36mMappings can be found at: \033[1;0m%s" % out_path
        print '========================='
        print "\n"

def run():
    cmd = get_cmd()
    if (cmd != 's' and cmd != 'u' and cmd != 'r'):
        die('Did not understand command \"%s\"' %cmd)

    if cmd != 'r':
        target_dir = get_target_directory()
        os.chdir(target_dir)

    if cmd == 'r':
        qa_file = get_qa_csv()

    csv_path = get_csv_path()
    snowflake_map = create_snowflake_map(csv_path)


    if cmd == 'u':
        undo(target_dir, snowflake_map)
    elif cmd == 's':
        convert(target_dir, snowflake_map)
    else:
        reverse(qa_file, snowflake_map)

run()

